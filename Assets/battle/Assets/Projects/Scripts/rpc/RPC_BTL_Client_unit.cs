/*******************************************************************************
 * @file    RPC_BTL_Client_unit.cs
 * @brief   Auto generated by mbrpcgen.rb
 *******************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
namespace BTL
{
	/**
     * RPC送受信PUと、ツールで吐き出したRPCスタブコードを合成して作成するPU
     * 自動生成予定
     */
	public partial class PU_Client : mln.RPCBasePU
            , IBattleClient
            , IBattlePuListClient
            , IMatchingClient
    {
		/*
         * Get Interfaces
         */
        public IBattleClient GetInterface_Battle(UInt64 conid)
		{
            ResolveSendID(conid);
            return this;
        }
        public IBattlePuListClient GetInterface_BattlePuList(UInt64 conid)
		{
            ResolveSendID(conid);
            return this;
        }
        public IMatchingClient GetInterface_Matching(UInt64 conid)
		{
            ResolveSendID(conid);
            return this;
        }
        /*
         * Send Queryinterface
         */
        public override UInt32 RPC_ConnectRequestBase(UInt64 rpcid, UInt32 intf_id, UInt64 any_key, bool bReturn)
        {
		    UInt32 ret = 0;
            switch (intf_id)
            {
                case (UInt32)INTFID.BATTLE:
                    if (bReturn)
                    {
                        ret = GetInterface_Battle(rpcid).Send_QueryConnectBattleResult(0);
                    }
                    else
                    {
                        ret = GetInterface_Battle(rpcid).Send_QueryConnectBattle(any_key);
                    }
                    break;
                case (UInt32)INTFID.BATTLEPULIST:
                    if (bReturn)
                    {
                        ret = GetInterface_BattlePuList(rpcid).Send_QueryConnectBattlePuListResult(0);
                    }
                    else
                    {
                        ret = GetInterface_BattlePuList(rpcid).Send_QueryConnectBattlePuList(any_key);
                    }
                    break;
                case (UInt32)INTFID.MATCHING:
                    if (bReturn)
                    {
                        ret = GetInterface_Matching(rpcid).Send_QueryConnectMatchingResult(0);
                    }
                    else
                    {
                        ret = GetInterface_Matching(rpcid).Send_QueryConnectMatching(any_key);
                    }
                    break;
                default:
                    mln.Utility.MLN_TRACE_LOG("Error:");
                    break;
            }
            return ret;
        }
        /*
         * 受信メイン ここは自動作成
         */
        public override UInt32 RPC_RecvBase(mln.EndianStream es, UInt32 type, UInt32 intf, UInt16 sz, UInt64 conid)
        {
			UInt32 ret = 0;
		    switch (intf)
            {
                case (UInt32)INTFID.BATTLE:
                    {
                        ret = Receive_Battle( conid, type, sz, es );
                    }
                    break;
                case (UInt32)INTFID.BATTLEPULIST:
                    {
                        ret = Receive_BattlePuList( conid, type, sz, es );
                    }
                    break;
                case (UInt32)INTFID.MATCHING:
                    {
                        ret = Receive_Matching( conid, type, sz, es );
                    }
                    break;
                default:
                    {
                        mln.Utility.MLN_TRACE_LOG("Error:");
                    }
                    break;
            }
            return ret;
        }
        /**
         * RPCヘルスチェック要求
         */
        public override void RPC_QueryHealthCheck( UInt64 rpcId )
        {
            switch( GetInterfaceID( rpcId ) ){
            case (UInt32)INTFID.BATTLE:{
                GetInterface_Battle( rpcId ).Send_QueryHealthCheckBattle();
                break;
            }
            case (UInt32)INTFID.BATTLEPULIST:{
                GetInterface_BattlePuList( rpcId ).Send_QueryHealthCheckBattlePuList();
                break;
            }
            case (UInt32)INTFID.MATCHING:{
                GetInterface_Matching( rpcId ).Send_QueryHealthCheckMatching();
                break;
            }
            default: break;
            }
        }
        /**
         * 接続の切断
         */
        public override void RPC_QueryDisconnect( UInt64 rpcId )
        {
            switch( GetInterfaceID( rpcId ) ){
            case (UInt32)INTFID.BATTLE:{
                GetInterface_Battle( rpcId ).Send_QueryDisconnectBattle();
                break;
            }
            case (UInt32)INTFID.BATTLEPULIST:{
                GetInterface_BattlePuList( rpcId ).Send_QueryDisconnectBattlePuList();
                break;
            }
            case (UInt32)INTFID.MATCHING:{
                GetInterface_Matching( rpcId ).Send_QueryDisconnectMatching();
                break;
            }
            default: break;
            }
        }
    }
	/*
     * User ProcessUnit Create Factory
     */
    public class ProcessUnitFactory_Client : mln.ProcessUnitFactory
    {
        //-------------------------------------------------------------------
        // public methods
        //-------------------------------------------------------------------
        /**
         * プロセスユニットを生成
         *
         * @retval	生成された ProcessUnit またはその派生クラスのインスタンス
         */
        public override mln.ProcessUnit CreateProcessUnit()
        {
            return new PU_Client();
        }
    }
}
